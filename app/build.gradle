apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

def VERSION_NAME = rootProject.ext.android["versionName"]

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    signingConfigs {
        release {
            keyAlias rootProject.ext.signingConfig["keyAlias"]
            keyPassword rootProject.ext.signingConfig["keyPassword"]
            storeFile file(rootProject.ext.signingConfig["storeFile"])
            storePassword rootProject.ext.signingConfig["storePassword"]
        }
    }

    defaultConfig {
        applicationId "com.min.sample"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode getVersionCodeByName(VERSION_NAME)
        versionName VERSION_NAME

        flavorDimensions "default"
        ndk {
            abiFilters "armeabi" //由于需要采用weex，故只能使用armeabi
        }
        resValue "string", "build_config_package", applicationId  //子module可以通过这个属性，获取主module的buildConfig中的变量

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner" //instrumentation test需要

        buildConfigField 'String', 'API_SERVER_URL', '"https://api.cheguo.com"'
        buildConfigField 'String', 'API_UPDATE_URL', '"https://version.cheguo.com"'
        buildConfigField 'String', 'API_UPLOAD_PIC_URL', '"https://file.cheguo.com"'

        buildConfigField 'String', 'APP_SOURCE', '"198dc1d2c84b3dbc5774fe9b4085d5"'
        buildConfigField 'String', 'APP_SECRET', '"be7175c2ef4dcf9c06e3471a5e5633"'

        buildConfigField 'String', 'BUGLY_APPID', '"123"'
        buildConfigField 'String', 'GIT_VERSION', "\"${getGitVersion()}\""
        manifestPlaceholders = ['BAIDU_KEY'   : '123',
                                'APP_NAME'    : '@string/app_name']

    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        beta_in {}
        beta_out {}
        beta_preview {}
        offical {}
    }

    productFlavors.all { flavor ->
        manifestPlaceholders.put("UMENG_CHANNEL_VALUE", name)
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def date = new Date()
            def formattedDate = date.format('yyyyMMddHHmm')
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk') && 'release'.equals(variant.buildType.name)) {
                def fileName = "${rootProject.ext.android['apkPrefixName']}_${versionName}_${formattedDate}_${variant.productFlavors[0].name}.apk"
                outputFileName = fileName
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "8g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    greendao {
        schemaVersion 1
        daoPackage 'com.min.sample.data.local.db.dao'
        targetGenDir 'src/main/java'
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile(rootProject.ext.dependencies["espresso-core"], {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile rootProject.ext.dependencies["junit"]

    compile rootProject.ext.dependencies["crashreport"]
    debugCompile rootProject.ext.dependencies["stetho"]

    compile project(':librarys-base:core-basics')

    compile project(':librarys-base:sdk-location')
    compile project(':librarys-base:h5-container')
    compile project(':librarys-base:weex-container')
    compile project(':librarys-base:router')
    if(!isBuildModule.toBoolean()){
        compile project(':librarys-business:order')
    }
}

def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

int getVersionCodeByName(String versionName) {
    def arr = versionName.split('\\.')
    for(int i=1;i<arr.length;i++){
        if(arr[i].length() == 1){
            arr[i]='0'+arr[i]
        }
    }
    def versionCode = '';
    for(int i=0;i<arr.length;i++){
        versionCode = versionCode +  arr[i];
    }
    println versionCode
    return Integer.parseInt(versionCode)
}